{"version":3,"sources":["components/shapes/TodoShape.js","components/Todo/Todo.jsx","components/ListOptions/ListOptions.jsx","components/shapes/ListOptionsShape.js","components/shapes/TodoListShape.js","components/TodoList/TodoList.jsx","App.jsx","api.js","components/CurrentUser/CurrentUser.jsx","components/shapes/CurrentUserShape.js","index.js"],"names":["TodoShape","id","PropTypes","number","isRequired","title","string","completed","bool","userId","Todo","todo","handleUserSelect","selectedTodoId","className","ClassNames","type","checked","readOnly","onClick","ListOptions","func","titleQuery","statusQuery","handleChange","name","placeholder","value","onChange","defaultProps","arrayOf","shape","TodoList","state","callbacksByStatus","all","active","props","selectUser","setState","event","target","filterTodos","todos","filterQuery","toLowerCase","filter","includes","this","filteredTodos","map","key","React","PureComponent","todosFromServer","request","url","options","fetch","then","response","ok","Error","status","statusText","json","CurrentUser","email","phone","getUser","user","data","prevState","clearUser","App","selectedUserId","getTodos","result","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64bb2866.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const TodoShape = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool,\n  userId: PropTypes.number,\n};\n","import React from 'react';\nimport './Todo.scss';\nimport ClassNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport { TodoShape } from '../shapes/TodoShape';\n\nexport const Todo = ({ todo, handleUserSelect, selectedTodoId }) => {\n  const { id, title, completed, userId } = todo;\n\n  return (\n    <li\n      className={ClassNames('Todo', {\n        'Todo--checked': completed,\n        'Todo--unchecked': !completed,\n      })}\n    >\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={completed}\n          readOnly\n        />\n        <p>{title}</p>\n      </label>\n\n      <button\n        className={ClassNames(\n          'button',\n          { 'Todo__user-button--selected': selectedTodoId === id },\n        )}\n        type=\"button\"\n        onClick={() => handleUserSelect(userId, id)}\n      >\n        {`User #${userId}`}\n      </button>\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  todo: PropTypes.shape(TodoShape).isRequired,\n  handleUserSelect: PropTypes.func.isRequired,\n  selectedTodoId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport { ListOptionsShape } from '../shapes/ListOptionsShape';\n\nexport const ListOptions = ({ titleQuery, statusQuery, handleChange }) => (\n  <div>\n    <input\n      type=\"text\"\n      name=\"title\"\n      className=\"input\"\n      placeholder=\"Enter todo title\"\n      value={titleQuery}\n      onChange={handleChange}\n    />\n\n    <select\n      name=\"status\"\n      id=\"status\"\n      className=\"select\"\n      value={statusQuery}\n      onChange={handleChange}\n    >\n      <option value=\"all\">all</option>\n      <option value=\"active\">active</option>\n      <option value=\"completed\">completed</option>\n    </select>\n  </div>\n);\n\nListOptions.propTypes = ListOptionsShape;\n\nListOptions.defaultProps = {\n  titleQuery: '',\n  statusQuery: 'all',\n};\n","import PropTypes from 'prop-types';\n\nexport const ListOptionsShape = {\n  titleQuery: PropTypes.string,\n  statusQuery: PropTypes.string,\n  handleChange: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { TodoShape } from './TodoShape';\n\nexport const TodoListShape = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape(TodoShape),\n  ),\n  selectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './TodoList.scss';\n\nimport { Todo } from '../Todo';\nimport { ListOptions } from '../ListOptions';\nimport { TodoListShape } from '../shapes/TodoListShape';\n\nexport class TodoList extends React.PureComponent {\n  state = {\n    selectedTodoId: 0,\n    titleQuery: '',\n    statusQuery: 'all',\n  };\n\n  callbacksByStatus = {\n    all: () => true,\n    active: todo => !todo.completed,\n    completed: todo => todo.completed,\n  };\n\n  handleUserSelect = (userId, id) => {\n    this.props.selectUser(userId);\n\n    this.setState({\n      selectedTodoId: id,\n    });\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [`${name}Query`]: value,\n    });\n  };\n\n  filterTodos = (todos) => {\n    const { titleQuery, statusQuery } = this.state;\n    const filterQuery = titleQuery.toLowerCase();\n\n    return todos.filter(todo => (\n      todo.title.toLowerCase().includes(filterQuery)\n      && this.callbacksByStatus[statusQuery](todo)));\n  };\n\n  render() {\n    const { todos } = this.props;\n    const { selectedTodoId, titleQuery, statusQuery } = this.state;\n    const filteredTodos = this.filterTodos(todos);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <ListOptions\n          handleChange={this.handleChange}\n          titleQuery={titleQuery}\n          statusQuery={statusQuery}\n        />\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <Todo\n                key={todo.id}\n                todo={todo}\n                handleUserSelect={this.handleUserSelect}\n                selectedTodoId={selectedTodoId}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = TodoListShape;\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { request } from './api';\n\nlet todosFromServer;\n\nclass App extends React.PureComponent {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    this.getTodos();\n  }\n\n  getTodos = () => {\n    request('./todos').then((result) => {\n      todosFromServer = result.data;\n\n      this.setState({\n        todos: todosFromServer,\n      });\n    });\n  }\n\n  selectUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => (\n  fetch(`${BASE_URL}${url}`, options)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    })\n);\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport { request } from '../../api';\nimport { CurrentUserShape } from '../shapes/CurrentUserShape';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    id: 0,\n    name: '',\n    email: '',\n    phone: '',\n  };\n\n  componentDidMount() {\n    this.getUser(this.props.userId);\n  }\n\n  componentDidUpdate(prevState) {\n    if (this.state.id !== prevState.id) {\n      this.getUser(this.props.userId);\n    }\n  }\n\n  getUser = (userId) => {\n    request(`./users/${userId}`).then((user) => {\n      const { id, name, email, phone } = user.data;\n\n      this.setState({\n        id,\n        name,\n        email,\n        phone,\n      });\n    });\n  };\n\n  render() {\n    const { name, id, email, phone } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${id}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clear button\"\n          onClick={this.props.clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = CurrentUserShape;\n","import PropTypes from 'prop-types';\n\nexport const CurrentUserShape = {\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}